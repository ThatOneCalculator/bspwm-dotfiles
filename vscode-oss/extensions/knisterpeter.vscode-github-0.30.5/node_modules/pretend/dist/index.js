"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pretend = exports.resourceTypeDecoratorFactory = exports.headerDecoratorFactory = exports.methodDecoratorFactory = void 0;
var decorators_1 = require("./decorators");
Object.defineProperty(exports, "Delete", { enumerable: true, get: function () { return decorators_1.Delete; } });
Object.defineProperty(exports, "FormData", { enumerable: true, get: function () { return decorators_1.FormData; } });
Object.defineProperty(exports, "FormEncoding", { enumerable: true, get: function () { return decorators_1.FormEncoding; } });
Object.defineProperty(exports, "Get", { enumerable: true, get: function () { return decorators_1.Get; } });
Object.defineProperty(exports, "Headers", { enumerable: true, get: function () { return decorators_1.Headers; } });
Object.defineProperty(exports, "Patch", { enumerable: true, get: function () { return decorators_1.Patch; } });
Object.defineProperty(exports, "Post", { enumerable: true, get: function () { return decorators_1.Post; } });
Object.defineProperty(exports, "Put", { enumerable: true, get: function () { return decorators_1.Put; } });
function createDataMapper(target, property, mapper) {
    var dataMappers = target.__dataMappers__;
    if (!dataMappers) {
        dataMappers = {};
        Object.defineProperty(target, '__dataMappers__', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: dataMappers
        });
    }
    dataMappers[property] = mapper;
}
function getDataMapper(target, property) {
    var dataMappers = target.__dataMappers__;
    return dataMappers === null || dataMappers === void 0 ? void 0 : dataMappers[property];
}
function createUrl(url, args) {
    var i = 0;
    return [
        url
            .split('/')
            .map(function (part) {
            return (part.startsWith(':') || part.startsWith('{')) && i <= args.length
                ? args[i++]
                : part;
        })
            .join('/'),
        args.length === 0 ? -1 : i
    ];
}
function createQuery(parameters) {
    return Object.keys(parameters)
        .reduce(function (query, name) {
        return query + "&" + encodeURIComponent(name) + "=" + encodeURIComponent(parameters[name]);
    }, '')
        .replace(/^&/, '?');
}
function filterFormData(args, parameters) {
    return args.filter(function (_, index) {
        return (!parameters || parameters.every(function (param) { return param.parameter !== index; }));
    });
}
function buildUrl(tmpl, args, appendQuery) {
    var _a = createUrl(tmpl, args), url = _a[0], queryOrBodyIndex = _a[1];
    var query = createQuery(appendQuery && queryOrBodyIndex > -1 ? args[queryOrBodyIndex] : {});
    return ["" + url + query, queryOrBodyIndex];
}
function prepareHeaders(instance) {
    var headers = new Headers();
    var perRequest = instance.__Pretend__.perRequest;
    if (perRequest && perRequest.headers) {
        Object.keys(perRequest.headers).forEach(function (name) {
            perRequest.headers[name].forEach(function (value) {
                headers.append(name, value);
            });
        });
    }
    return headers;
}
function chainFactory(interceptors, i) {
    if (i === void 0) { i = 0; }
    return function chainStep(request) {
        return interceptors[i](chainFactory(interceptors, i + 1), request);
    };
}
function execute(instance, method, tmpl, args, sendBody, appendQuery, parameters) {
    var createBody = function () {
        if (parameters) {
            if (parameters.some(function (parameter) { return parameter.type === 'FormData'; })) {
                var formData_1 = new FormData();
                parameters
                    .filter(function (parameter) {
                    return parameter.type === 'FormData';
                })
                    .forEach(function (parameter) {
                    var value = args[parameter.parameter];
                    if (value) {
                        formData_1.append(parameter.name, value, value.name);
                    }
                });
                return formData_1;
            }
            var body_1 = args[appendQuery ? queryOrBodyIndex + 1 : queryOrBodyIndex];
            return createQuery(body_1).substr(1);
        }
        return sendBody
            ? JSON.stringify(args[appendQuery ? queryOrBodyIndex + 1 : queryOrBodyIndex])
            : undefined;
    };
    var urlParams = filterFormData(args, parameters);
    var createUrlResult = buildUrl(tmpl, urlParams, appendQuery);
    var url = createUrlResult[0];
    var queryOrBodyIndex = createUrlResult[1];
    var headers = prepareHeaders(instance);
    var body = createBody();
    var chain = chainFactory(instance.__Pretend__.interceptors);
    return chain({
        url: url,
        options: {
            method: method,
            headers: headers,
            body: body
        }
    });
}
/**
 * @internal
 */
function methodDecoratorFactory(method, url, sendBody, appendQuery) {
    return function (target, property, descriptor) {
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this.__Pretend__.dataMapper = getDataMapper(target, property);
            return execute(this, method, "" + this.__Pretend__.baseUrl + url, args, sendBody, appendQuery, (this.__Pretend__.parameters || {})[property.toString()]);
        };
        return descriptor;
    };
}
exports.methodDecoratorFactory = methodDecoratorFactory;
/**
 * @internal
 */
function headerDecoratorFactory(headers) {
    return function (_target, _propertyKey, descriptor) {
        var originalFunction = descriptor.value;
        descriptor.value = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return Promise.resolve().then(function () {
                _this.__Pretend__.perRequest = {
                    headers: (Array.isArray(headers) ? headers : [headers]).reduce(function (akku, header) {
                        var match = header.match(/([^:]+):\s*(.*)/);
                        if (!match) {
                            throw new Error("Invalid header format for '" + header + "'");
                        }
                        var name = match[1], value = match[2];
                        if (!akku[name]) {
                            akku[name] = [];
                        }
                        akku[name].push(value);
                        return akku;
                    }, 
                    // tslint:disable-next-line: no-object-literal-type-assertion
                    {})
                };
                return originalFunction
                    .apply(_this, args)
                    .then(function (result) {
                    _this.__Pretend__.perRequest = undefined;
                    return result;
                })
                    .catch(function (error) {
                    _this.__Pretend__.perRequest = undefined;
                    throw error;
                });
            });
        };
        return descriptor;
    };
}
exports.headerDecoratorFactory = headerDecoratorFactory;
function resourceTypeDecoratorFactory(type, transform) {
    return function (target, property) {
        createDataMapper(target, property, function (data) { return new (type.bind.apply(type, __spreadArrays([void 0], transform(data))))(); });
    };
}
exports.resourceTypeDecoratorFactory = resourceTypeDecoratorFactory;
var Pretend = /** @class */ (function () {
    function Pretend() {
        this.interceptors = [];
        this.decoder = Pretend.JsonDecoder;
    }
    Pretend.builder = function () {
        return new Pretend();
    };
    Pretend.prototype.interceptor = function (interceptor) {
        this.interceptors.push(interceptor);
        return this;
    };
    Pretend.prototype.requestInterceptor = function (requestInterceptor) {
        this.interceptors.push(function (chain, request) {
            return chain(requestInterceptor(request));
        });
        return this;
    };
    Pretend.prototype.basicAuthentication = function (username, password) {
        var usernameAndPassword = username + ":" + password;
        var auth = 'Basic ' +
            (typeof global.btoa !== 'undefined'
                ? global.btoa(usernameAndPassword)
                : Buffer.from(usernameAndPassword, 'binary').toString('base64'));
        this.requestInterceptor(function (request) {
            request.options.headers.set('Authorization', auth);
            return request;
        });
        return this;
    };
    Pretend.prototype.decode = function (decoder) {
        this.decoder = decoder;
        return this;
    };
    Pretend.prototype.target = function (descriptor, baseUrl) {
        var _this = this;
        if (this.decoder) {
            // if we have a decoder, the first thing to do with a response is to decode it
            this.interceptors.push(function (chain, request) {
                return chain(request).then(function (response) { return _this.decoder(response); });
            });
        }
        // this is the end of the request chain
        this.interceptors.push(Pretend.FetchInterceptor);
        var instance = new descriptor();
        Object.defineProperty(instance, '__Pretend__', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: {
                baseUrl: baseUrl.endsWith('/')
                    ? baseUrl.substring(0, baseUrl.length - 1)
                    : baseUrl,
                interceptors: this.interceptors,
                parameters: descriptor.prototype.__pretend_parameter__
            }
        });
        this.interceptors.unshift(function (chain, request) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, chain(request)];
                    case 1:
                        response = _a.sent();
                        if (instance.__Pretend__.dataMapper) {
                            response = instance.__Pretend__.dataMapper(response);
                            instance.__Pretend__.dataMapper = undefined;
                        }
                        return [2 /*return*/, response];
                }
            });
        }); });
        return instance;
    };
    Pretend.FetchInterceptor = 
    // tslint:disable-next-line
    function (_chain, request) {
        return fetch(request.url, request.options);
    };
    Pretend.JsonDecoder = function (response) {
        return response.json();
    };
    Pretend.TextDecoder = function (response) {
        return response.text();
    };
    return Pretend;
}());
exports.Pretend = Pretend;
//# sourceMappingURL=index.js.map