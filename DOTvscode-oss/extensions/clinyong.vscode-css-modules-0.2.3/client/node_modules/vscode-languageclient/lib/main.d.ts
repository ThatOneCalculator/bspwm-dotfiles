/// <reference types="node" />
import * as cp from 'child_process';
import ChildProcess = cp.ChildProcess;
import { BaseLanguageClient, LanguageClientOptions, MessageTransports, StaticFeature, DynamicFeature } from './client';
import { Disposable } from 'vscode';
export * from './client';
export interface ExecutableOptions {
    cwd?: string;
    stdio?: string | string[];
    env?: any;
    detached?: boolean;
}
export interface Executable {
    command: string;
    args?: string[];
    options?: ExecutableOptions;
}
export interface ForkOptions {
    cwd?: string;
    env?: any;
    encoding?: string;
    execArgv?: string[];
}
export declare enum TransportKind {
    stdio = 0,
    ipc = 1,
    pipe = 2,
}
export interface NodeModule {
    module: string;
    transport?: TransportKind;
    args?: string[];
    runtime?: string;
    options?: ForkOptions;
}
export interface StreamInfo {
    writer: NodeJS.WritableStream;
    reader: NodeJS.ReadableStream;
}
export declare type ServerOptions = Executable | {
    run: Executable;
    debug: Executable;
} | {
    run: NodeModule;
    debug: NodeModule;
} | NodeModule | (() => Thenable<ChildProcess | StreamInfo | MessageTransports>);
export declare class LanguageClient extends BaseLanguageClient {
    private _serverOptions;
    private _forceDebug;
    private _serverProcess;
    constructor(name: string, serverOptions: ServerOptions, clientOptions: LanguageClientOptions, forceDebug?: boolean);
    constructor(id: string, name: string, serverOptions: ServerOptions, clientOptions: LanguageClientOptions, forceDebug?: boolean);
    stop(): Thenable<void>;
    private checkProcessDied(childProcess);
    protected handleConnectionClosed(): void;
    protected createMessageTransports(encoding: string): Thenable<MessageTransports>;
    registerProposedFeatures(): void;
}
export declare class SettingMonitor {
    private _client;
    private _setting;
    private _listeners;
    constructor(_client: LanguageClient, _setting: string);
    start(): Disposable;
    private onDidChangeConfiguration();
}
import * as config from './configuration.proposed';
import * as folders from './workspaceFolders.proposed';
export declare namespace ProposedFeatures {
    type ConfigurationFeature = config.ConfigurationFeature;
    const ConfigurationFeature: typeof config.ConfigurationFeature;
    type ConfigurationMiddleware = config.ConfigurationMiddleware;
    type WorkspaceFoldersFeature = folders.WorkspaceFoldersFeature;
    const WorkspaceFoldersFeature: typeof folders.WorkspaceFoldersFeature;
    type WorkspaceFolderMiddleware = folders.WorkspaceFolderMiddleware;
    function createAll(client: BaseLanguageClient): (StaticFeature | DynamicFeature<any>)[];
}
